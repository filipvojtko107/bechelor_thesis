# Configuration file uses TOML file format

server_name = 'WebServerd/1.0'
ip_address = '0.0.0.0'
port = 80
port_https = 443

# Specifies if HTTPS is enabled
# Value:
# true: Enables HTTPS
# false: Disables HTTPS
https_enabled = true

# Absolute file path to SSL certificate used for RSA
# If http_enables is set to false, then this parameter value can be empty
# Value:
# - File path as a string
# - If http_enables is set to false, parameter value can be left empty ('')
ssl_certificate_rsa = '/etc/WebServerd/rsa.crt'

# Absolute file path to RSA private key
# Value:
# - File path as a string
# - If http_enables is set to false, parameter value can be left empty ('')
private_key_rsa = '/etc/WebServerd/rsa.key'

# Absolute file path to SSL certificate used for ECDSA
# If http_enables is set to false, then this parameter value can be empty
# Value:
# - File path as a string
# - If http_enables is set to false, parameter value can be left empty ('')
ssl_certificate_ecdsa = '/etc/WebServerd/ecdsa.crt'

# Absolute file path to ECDSA private key
# Value:
# - File path as a string
# - If http_enables is set to false, parameter value can be left empty ('')
private_key_ecdsa = '/etc/WebServerd/ecdsa.key'

# Specifies enabled ciphers supported by the server for communication encryption
# Supported cipher suites by the server are all cipher suites supported by TLS version 1.2 and 1.3.
# Value:
# - Array of cipher suites. Each cipher suite is in IANA format (e.g.: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256)
# - If http_enables is set to false, parameter value can be left empty ('')
cipher_suites = [
# Supported TLS 1.2 cipher suites
    'TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384',
    'TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384',
    'TLS_DHE_RSA_WITH_AES_256_GCM_SHA384',
    'TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256',
    'TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
    'TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256',
    'TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256',
    'TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256',
    'TLS_DHE_RSA_WITH_AES_128_GCM_SHA256',
    'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384',
    'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384',
    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA256',
    'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256',
    'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256',
    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA256',
    'TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA',
    'TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA',
    'TLS_DHE_RSA_WITH_AES_256_CBC_SHA',
    'TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA',
    'TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA',
    'TLS_DHE_RSA_WITH_AES_128_CBC_SHA',
    'TLS_RSA_WITH_AES_256_GCM_SHA384',
    'TLS_RSA_WITH_AES_128_GCM_SHA256',
    'TLS_RSA_WITH_AES_256_CBC_SHA256',
    'TLS_RSA_WITH_AES_128_CBC_SHA256',
    'TLS_RSA_WITH_AES_256_CBC_SHA',
    'TLS_RSA_WITH_AES_128_CBC_SHA',
# Supported TLS 1.3 cipher suites
    'TLS_AES_256_GCM_SHA384',
    'TLS_CHACHA20_POLY1305_SHA256',
    'TLS_AES_128_GCM_SHA256'
]

# Specifies server threads to handle connections.
# Value: 1 <= client_threads <= 65535
client_threads = 4

# Specifies size (in bytes) of the chunk in bytes for sending a file.
# Value: 1 <= file_chunk_size <= 2^32 - 1
file_chunk_size = 4096      # 4 Kb = 1 page

# Specifies maximal header size (in bytes) of HTTP request.
# Value: 1 <= max_header_size <= 65535
max_header_size = 1024      # 1 kB

# Specifies buffer size (in bytes) that is used to store body of HTTP request. If HTTP request body size exceeds this buffer size, it will be stored in temporary file.
# Value: 1 <= client_body_buffer_size <= 65535
client_body_buffer_size = 16384     # 16 kB

# Specifies maximal body size (in bytes) of HTTP request.
# Value: 1 <= client_max_body_size <= 2^64 - 1
client_max_body_size = 104857600      # 100 MB

# Specifies if content encoding should be prefered if HTTP request contains Accept-Encoding header field
# Value:
# true: Enabled
# false: Disabled
prefer_content_encoding = false

